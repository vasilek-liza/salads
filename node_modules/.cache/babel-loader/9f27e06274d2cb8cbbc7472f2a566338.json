{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchSalads } from \"./SaladThunks\";\nconst initialState = {\n  salads: [],\n  salad: {},\n  blockers: [],\n  loading: false,\n  error: \"\"\n};\nexport const SaladSlice = createSlice({\n  name: \"salad\",\n  initialState,\n  reducers: {\n    getSaladById(state, action) {\n      state.salad = state.salads.find(salad => salad._id === action.payload);\n    },\n\n    checkLock(state, action) {\n      state.salads.forEach(salad => {\n        salad.composition.find(id => {\n          for (let molecule of action.payload) {\n            if (id === molecule._id && molecule.qty < (salad.composition.filter(x => x === molecule._id).length || 1) && !state.blockers.includes(salad._id)) {\n              state.blockers.push(salad._id);\n              return true;\n            }\n          }\n        });\n      });\n    },\n\n    addSalad(state, action) {\n      state.salads.push(action.payload);\n    }\n\n  },\n  extraReducers: {\n    [fetchSalads.fulfilled.type]: (state, actions) => {\n      state.loading = false;\n      state.error = \"\";\n      state.salads = actions.payload.result;\n    },\n    [fetchSalads.pending.type]: state => {\n      state.loading = true;\n    },\n    [fetchSalads.rejected.type]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const saladReducer = SaladSlice.reducer;\nexport const {\n  getSaladById,\n  checkLock,\n  addSalad\n} = SaladSlice.actions;","map":{"version":3,"sources":["/Users/elizaveta/Desktop/Develop/src/store/reducers/Salad/SaladSlice.js"],"names":["createSlice","fetchSalads","initialState","salads","salad","blockers","loading","error","SaladSlice","name","reducers","getSaladById","state","action","find","_id","payload","checkLock","forEach","composition","id","molecule","qty","filter","x","length","includes","push","addSalad","extraReducers","fulfilled","type","actions","result","pending","rejected","saladReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,QAA4B,eAA5B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,KAAK,EAAE,EAFU;AAGjBC,EAAAA,QAAQ,EAAE,EAHO;AAIjBC,EAAAA,OAAO,EAAE,KAJQ;AAKjBC,EAAAA,KAAK,EAAE;AALU,CAArB;AAQA,OAAO,MAAMC,UAAU,GAAGR,WAAW,CAAC;AAClCS,EAAAA,IAAI,EAAE,OAD4B;AAElCP,EAAAA,YAFkC;AAGlCQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,YAAY,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACxBD,MAAAA,KAAK,CAACR,KAAN,GAAcQ,KAAK,CAACT,MAAN,CAAaW,IAAb,CAAmBV,KAAD,IAAWA,KAAK,CAACW,GAAN,KAAcF,MAAM,CAACG,OAAlD,CAAd;AACH,KAHK;;AAINC,IAAAA,SAAS,CAACL,KAAD,EAAQC,MAAR,EAAgB;AACrBD,MAAAA,KAAK,CAACT,MAAN,CAAae,OAAb,CAAsBd,KAAD,IAAW;AAC5BA,QAAAA,KAAK,CAACe,WAAN,CAAkBL,IAAlB,CAAwBM,EAAD,IAAQ;AAC3B,eAAK,IAAIC,QAAT,IAAqBR,MAAM,CAACG,OAA5B,EAAqC;AACjC,gBACII,EAAE,KAAKC,QAAQ,CAACN,GAAhB,IACAM,QAAQ,CAACC,GAAT,IAAgBlB,KAAK,CAACe,WAAN,CAAkBI,MAAlB,CAA0BC,CAAD,IAAOA,CAAC,KAAKH,QAAQ,CAACN,GAA/C,EAAoDU,MAApD,IAA8D,CAA9E,CADA,IAEA,CAACb,KAAK,CAACP,QAAN,CAAeqB,QAAf,CAAwBtB,KAAK,CAACW,GAA9B,CAHL,EAIE;AACEH,cAAAA,KAAK,CAACP,QAAN,CAAesB,IAAf,CAAoBvB,KAAK,CAACW,GAA1B;AACA,qBAAO,IAAP;AACH;AACJ;AACJ,SAXD;AAYH,OAbD;AAcH,KAnBK;;AAoBNa,IAAAA,QAAQ,CAAChB,KAAD,EAAQC,MAAR,EAAgB;AACpBD,MAAAA,KAAK,CAACT,MAAN,CAAawB,IAAb,CAAkBd,MAAM,CAACG,OAAzB;AACH;;AAtBK,GAHwB;AA2BlCa,EAAAA,aAAa,EAAE;AACX,KAAC5B,WAAW,CAAC6B,SAAZ,CAAsBC,IAAvB,GAA8B,CAACnB,KAAD,EAAQoB,OAAR,KAAoB;AAC9CpB,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc,EAAd;AACAK,MAAAA,KAAK,CAACT,MAAN,GAAe6B,OAAO,CAAChB,OAAR,CAAgBiB,MAA/B;AACH,KALU;AAMX,KAAChC,WAAW,CAACiC,OAAZ,CAAoBH,IAArB,GAA6BnB,KAAD,IAAW;AACnCA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACH,KARU;AASX,KAACL,WAAW,CAACkC,QAAZ,CAAqBJ,IAAtB,GAA6B,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AAC5CD,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACG,OAArB;AACH;AAZU;AA3BmB,CAAD,CAA9B;AA2CP,OAAO,MAAMoB,YAAY,GAAG5B,UAAU,CAAC6B,OAAhC;AACP,OAAO,MAAM;AAAE1B,EAAAA,YAAF;AAAgBM,EAAAA,SAAhB;AAA2BW,EAAAA;AAA3B,IAAwCpB,UAAU,CAACwB,OAAzD","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchSalads } from \"./SaladThunks\";\n\nconst initialState = {\n    salads: [],\n    salad: {},\n    blockers: [],\n    loading: false,\n    error: \"\",\n};\n\nexport const SaladSlice = createSlice({\n    name: \"salad\",\n    initialState,\n    reducers: {\n        getSaladById(state, action) {\n            state.salad = state.salads.find((salad) => salad._id === action.payload);\n        },\n        checkLock(state, action) {\n            state.salads.forEach((salad) => {\n                salad.composition.find((id) => {\n                    for (let molecule of action.payload) {\n                        if (\n                            id === molecule._id &&\n                            molecule.qty < (salad.composition.filter((x) => x === molecule._id).length || 1) &&\n                            !state.blockers.includes(salad._id)\n                        ) {\n                            state.blockers.push(salad._id);\n                            return true;\n                        }\n                    }\n                });\n            });\n        },\n        addSalad(state, action) {\n            state.salads.push(action.payload);\n        },\n    },\n    extraReducers: {\n        [fetchSalads.fulfilled.type]: (state, actions) => {\n            state.loading = false;\n            state.error = \"\";\n            state.salads = actions.payload.result;\n        },\n        [fetchSalads.pending.type]: (state) => {\n            state.loading = true;\n        },\n        [fetchSalads.rejected.type]: (state, action) => {\n            state.loading = false;\n            state.error = action.payload;\n        },\n    },\n});\n\nexport const saladReducer = SaladSlice.reducer;\nexport const { getSaladById, checkLock, addSalad } = SaladSlice.actions;\n"]},"metadata":{},"sourceType":"module"}