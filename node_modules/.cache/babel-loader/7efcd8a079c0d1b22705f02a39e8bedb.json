{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchMolecules, fetchMolecule } from \"./MoleculeThunks\";\nconst initialState = {\n  molecules: [],\n  cloneMolecules: [],\n  molecule: {},\n  composition: [],\n  reserve: [],\n  loading: false,\n  error: \"\"\n};\nexport const MoleculeSlice = createSlice({\n  name: \"molecule\",\n  initialState,\n  reducers: {\n    getComposition(state, action) {\n      if (action.payload && action.payload.composition) {\n        state.composition = [];\n        state.molecules.forEach(molecule => {\n          if (action.payload.composition.includes(molecule._id)) {\n            const count = action.payload.composition.filter(x => x === molecule._id).length;\n            const moleculeWithCount = { ...molecule,\n              count\n            };\n            state.composition.push(moleculeWithCount);\n          }\n        });\n      }\n    },\n\n    updateQuantity(state) {\n      state.molecules.forEach(molecule => {\n        const moleculeFromComposition = state.composition.find(x => x._id === molecule._id);\n\n        if (moleculeFromComposition) {\n          molecule.qty -= moleculeFromComposition.count || 1;\n        }\n      });\n    },\n\n    pushReverse(state, action) {\n      state.reserve.push(action.payload);\n    },\n\n    resetReverse(state) {\n      state.reserve = [];\n    },\n\n    createClone(state) {\n      state.cloneMolecules = state.molecules;\n    },\n\n    updateClone(state, action) {\n      state.cloneMolecules.find(molecule => {\n        if (molecule._id === action.payload._id) {\n          if (molecule.available === undefined) {\n            molecule.available = molecule.qty;\n          }\n\n          molecule.qty--;\n          molecule.count = (molecule.count || 0) + 1;\n          return true;\n        }\n      });\n    },\n\n    resetClone(state) {\n      state.cloneMolecules = [];\n    }\n\n  },\n  extraReducers: {\n    [fetchMolecules.fulfilled.type]: (state, actions) => {\n      state.loading = false;\n      state.error = \"\";\n      state.molecules = actions.payload.result;\n    },\n    [fetchMolecules.pending.type]: state => {\n      state.loading = true;\n    },\n    [fetchMolecules.rejected.type]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    },\n    [fetchMolecule.fulfilled.type]: (state, actions) => {\n      state.loading = false;\n      state.error = \"\";\n      state.molecule = actions.payload.result;\n    },\n    [fetchMolecule.pending.type]: state => {\n      state.loading = true;\n    },\n    [fetchMolecule.rejected.type]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const moleculeReducer = MoleculeSlice.reducer;\nexport const {\n  getComposition,\n  updateQuantity,\n  pushReverse,\n  resetReverse,\n  createClone,\n  resetClone,\n  updateClone\n} = MoleculeSlice.actions;","map":{"version":3,"sources":["/Users/elizaveta/Desktop/Develop/src/store/reducers/Molecule/MoleculeSlice.js"],"names":["createSlice","fetchMolecules","fetchMolecule","initialState","molecules","cloneMolecules","molecule","composition","reserve","loading","error","MoleculeSlice","name","reducers","getComposition","state","action","payload","forEach","includes","_id","count","filter","x","length","moleculeWithCount","push","updateQuantity","moleculeFromComposition","find","qty","pushReverse","resetReverse","createClone","updateClone","available","undefined","resetClone","extraReducers","fulfilled","type","actions","result","pending","rejected","moleculeReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,cAAT,EAAyBC,aAAzB,QAA8C,kBAA9C;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,SAAS,EAAE,EADM;AAEjBC,EAAAA,cAAc,EAAE,EAFC;AAGjBC,EAAAA,QAAQ,EAAE,EAHO;AAIjBC,EAAAA,WAAW,EAAE,EAJI;AAKjBC,EAAAA,OAAO,EAAE,EALQ;AAMjBC,EAAAA,OAAO,EAAE,KANQ;AAOjBC,EAAAA,KAAK,EAAE;AAPU,CAArB;AAUA,OAAO,MAAMC,aAAa,GAAGX,WAAW,CAAC;AACrCY,EAAAA,IAAI,EAAE,UAD+B;AAErCT,EAAAA,YAFqC;AAGrCU,EAAAA,QAAQ,EAAE;AACNC,IAAAA,cAAc,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAC1B,UAAIA,MAAM,CAACC,OAAP,IAAkBD,MAAM,CAACC,OAAP,CAAeV,WAArC,EAAkD;AAC9CQ,QAAAA,KAAK,CAACR,WAAN,GAAoB,EAApB;AACAQ,QAAAA,KAAK,CAACX,SAAN,CAAgBc,OAAhB,CAAyBZ,QAAD,IAAc;AAClC,cAAIU,MAAM,CAACC,OAAP,CAAeV,WAAf,CAA2BY,QAA3B,CAAoCb,QAAQ,CAACc,GAA7C,CAAJ,EAAuD;AACnD,kBAAMC,KAAK,GAAGL,MAAM,CAACC,OAAP,CAAeV,WAAf,CAA2Be,MAA3B,CAAmCC,CAAD,IAAOA,CAAC,KAAKjB,QAAQ,CAACc,GAAxD,EAA6DI,MAA3E;AACA,kBAAMC,iBAAiB,GAAG,EAAE,GAAGnB,QAAL;AAAee,cAAAA;AAAf,aAA1B;AACAN,YAAAA,KAAK,CAACR,WAAN,CAAkBmB,IAAlB,CAAuBD,iBAAvB;AACH;AACJ,SAND;AAOH;AACJ,KAZK;;AAaNE,IAAAA,cAAc,CAACZ,KAAD,EAAQ;AAClBA,MAAAA,KAAK,CAACX,SAAN,CAAgBc,OAAhB,CAAyBZ,QAAD,IAAc;AAClC,cAAMsB,uBAAuB,GAAGb,KAAK,CAACR,WAAN,CAAkBsB,IAAlB,CAAwBN,CAAD,IAAOA,CAAC,CAACH,GAAF,KAAUd,QAAQ,CAACc,GAAjD,CAAhC;;AACA,YAAIQ,uBAAJ,EAA6B;AACzBtB,UAAAA,QAAQ,CAACwB,GAAT,IAAgBF,uBAAuB,CAACP,KAAxB,IAAiC,CAAjD;AACH;AACJ,OALD;AAMH,KApBK;;AAqBNU,IAAAA,WAAW,CAAChB,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACP,OAAN,CAAckB,IAAd,CAAmBV,MAAM,CAACC,OAA1B;AACH,KAvBK;;AAwBNe,IAAAA,YAAY,CAACjB,KAAD,EAAQ;AAChBA,MAAAA,KAAK,CAACP,OAAN,GAAgB,EAAhB;AACH,KA1BK;;AA2BNyB,IAAAA,WAAW,CAAClB,KAAD,EAAQ;AACfA,MAAAA,KAAK,CAACV,cAAN,GAAuBU,KAAK,CAACX,SAA7B;AACH,KA7BK;;AA8BN8B,IAAAA,WAAW,CAACnB,KAAD,EAAQC,MAAR,EAAgB;AACvBD,MAAAA,KAAK,CAACV,cAAN,CAAqBwB,IAArB,CAA2BvB,QAAD,IAAc;AACpC,YAAIA,QAAQ,CAACc,GAAT,KAAiBJ,MAAM,CAACC,OAAP,CAAeG,GAApC,EAAyC;AACrC,cAAId,QAAQ,CAAC6B,SAAT,KAAuBC,SAA3B,EAAsC;AAClC9B,YAAAA,QAAQ,CAAC6B,SAAT,GAAqB7B,QAAQ,CAACwB,GAA9B;AACH;;AACDxB,UAAAA,QAAQ,CAACwB,GAAT;AACAxB,UAAAA,QAAQ,CAACe,KAAT,GAAiB,CAACf,QAAQ,CAACe,KAAT,IAAkB,CAAnB,IAAwB,CAAzC;AACA,iBAAO,IAAP;AACH;AACJ,OATD;AAUH,KAzCK;;AA0CNgB,IAAAA,UAAU,CAACtB,KAAD,EAAQ;AACdA,MAAAA,KAAK,CAACV,cAAN,GAAuB,EAAvB;AACH;;AA5CK,GAH2B;AAiDrCiC,EAAAA,aAAa,EAAE;AACX,KAACrC,cAAc,CAACsC,SAAf,CAAyBC,IAA1B,GAAiC,CAACzB,KAAD,EAAQ0B,OAAR,KAAoB;AACjD1B,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc,EAAd;AACAK,MAAAA,KAAK,CAACX,SAAN,GAAkBqC,OAAO,CAACxB,OAAR,CAAgByB,MAAlC;AACH,KALU;AAMX,KAACzC,cAAc,CAAC0C,OAAf,CAAuBH,IAAxB,GAAgCzB,KAAD,IAAW;AACtCA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACH,KARU;AASX,KAACR,cAAc,CAAC2C,QAAf,CAAwBJ,IAAzB,GAAgC,CAACzB,KAAD,EAAQC,MAAR,KAAmB;AAC/CD,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACH,KAZU;AAaX,KAACf,aAAa,CAACqC,SAAd,CAAwBC,IAAzB,GAAgC,CAACzB,KAAD,EAAQ0B,OAAR,KAAoB;AAChD1B,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc,EAAd;AACAK,MAAAA,KAAK,CAACT,QAAN,GAAiBmC,OAAO,CAACxB,OAAR,CAAgByB,MAAjC;AACH,KAjBU;AAkBX,KAACxC,aAAa,CAACyC,OAAd,CAAsBH,IAAvB,GAA+BzB,KAAD,IAAW;AACrCA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACH,KApBU;AAqBX,KAACP,aAAa,CAAC0C,QAAd,CAAuBJ,IAAxB,GAA+B,CAACzB,KAAD,EAAQC,MAAR,KAAmB;AAC9CD,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACC,OAArB;AACH;AAxBU;AAjDsB,CAAD,CAAjC;AA6EP,OAAO,MAAM4B,eAAe,GAAGlC,aAAa,CAACmC,OAAtC;AACP,OAAO,MAAM;AAAEhC,EAAAA,cAAF;AAAkBa,EAAAA,cAAlB;AAAkCI,EAAAA,WAAlC;AAA+CC,EAAAA,YAA/C;AAA6DC,EAAAA,WAA7D;AAA0EI,EAAAA,UAA1E;AAAsFH,EAAAA;AAAtF,IAAsGvB,aAAa,CAAC8B,OAA1H","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { fetchMolecules, fetchMolecule } from \"./MoleculeThunks\";\n\nconst initialState = {\n    molecules: [],\n    cloneMolecules: [],\n    molecule: {},\n    composition: [],\n    reserve: [],\n    loading: false,\n    error: \"\",\n};\n\nexport const MoleculeSlice = createSlice({\n    name: \"molecule\",\n    initialState,\n    reducers: {\n        getComposition(state, action) {\n            if (action.payload && action.payload.composition) {\n                state.composition = [];\n                state.molecules.forEach((molecule) => {\n                    if (action.payload.composition.includes(molecule._id)) {\n                        const count = action.payload.composition.filter((x) => x === molecule._id).length;\n                        const moleculeWithCount = { ...molecule, count };\n                        state.composition.push(moleculeWithCount);\n                    }\n                });\n            }\n        },\n        updateQuantity(state) {\n            state.molecules.forEach((molecule) => {\n                const moleculeFromComposition = state.composition.find((x) => x._id === molecule._id);\n                if (moleculeFromComposition) {\n                    molecule.qty -= moleculeFromComposition.count || 1;\n                }\n            });\n        },\n        pushReverse(state, action) {\n            state.reserve.push(action.payload);\n        },\n        resetReverse(state) {\n            state.reserve = [];\n        },\n        createClone(state) {\n            state.cloneMolecules = state.molecules;\n        },\n        updateClone(state, action) {\n            state.cloneMolecules.find((molecule) => {\n                if (molecule._id === action.payload._id) {\n                    if (molecule.available === undefined) {\n                        molecule.available = molecule.qty;\n                    }\n                    molecule.qty--;\n                    molecule.count = (molecule.count || 0) + 1;\n                    return true;\n                }\n            });\n        },\n        resetClone(state) {\n            state.cloneMolecules = [];\n        },\n    },\n    extraReducers: {\n        [fetchMolecules.fulfilled.type]: (state, actions) => {\n            state.loading = false;\n            state.error = \"\";\n            state.molecules = actions.payload.result;\n        },\n        [fetchMolecules.pending.type]: (state) => {\n            state.loading = true;\n        },\n        [fetchMolecules.rejected.type]: (state, action) => {\n            state.loading = false;\n            state.error = action.payload;\n        },\n        [fetchMolecule.fulfilled.type]: (state, actions) => {\n            state.loading = false;\n            state.error = \"\";\n            state.molecule = actions.payload.result;\n        },\n        [fetchMolecule.pending.type]: (state) => {\n            state.loading = true;\n        },\n        [fetchMolecule.rejected.type]: (state, action) => {\n            state.loading = false;\n            state.error = action.payload;\n        },\n    },\n});\n\nexport const moleculeReducer = MoleculeSlice.reducer;\nexport const { getComposition, updateQuantity, pushReverse, resetReverse, createClone, resetClone, updateClone } = MoleculeSlice.actions;\n"]},"metadata":{},"sourceType":"module"}