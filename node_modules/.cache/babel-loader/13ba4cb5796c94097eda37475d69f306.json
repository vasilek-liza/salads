{"ast":null,"code":"import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { createClone, getComposition, updateQuantity } from \"../Molecule/MoleculeSlice\";\nimport { fetchMolecules } from \"../Molecule/MoleculeThunks\";\nimport { calculate, pushOrder } from \"../Order/OrderSlice\";\nimport { addSalad, checkLock } from \"../Salad/SaladSlice\";\nimport { fetchSalads } from \"../Salad/SaladThunks\";\nexport const initApp = createAsyncThunk(\"initApp\", async (_, thunkAPI) => {\n  try {\n    await thunkAPI.dispatch(fetchMolecules());\n    await thunkAPI.dispatch(fetchSalads());\n    const {\n      molecules\n    } = thunkAPI.getState().moleculeReducer;\n    thunkAPI.dispatch(checkLock(molecules));\n  } catch (e) {\n    return thunkAPI.rejectWithValue(e.message);\n  }\n});\nexport const setOrder = createAsyncThunk(\"setOrder\", async (salad, thunkAPI) => {\n  thunkAPI.dispatch(getComposition(salad));\n  thunkAPI.dispatch(updateQuantity());\n  const {\n    molecules,\n    composition\n  } = thunkAPI.getState().moleculeReducer;\n  thunkAPI.dispatch(checkLock(molecules));\n  const saladOrder = { ...salad,\n    composition\n  };\n  thunkAPI.dispatch(pushOrder(saladOrder));\n  thunkAPI.dispatch(calculate());\n});\nexport const addNewSalad = createAsyncThunk(\"addNewSalad\", async (name, thunkAPI) => {\n  const {\n    reserve\n  } = thunkAPI.getState().moleculeReducer;\n  const newSalad = {\n    title: name,\n    price: reserve.reduce((sum, curr) => sum + curr.qty, 0),\n    composition: reserve.map(element => element._id),\n    _id: new Date().getTime().toString()\n  };\n  thunkAPI.dispatch(addSalad(newSalad));\n  thunkAPI.dispatch(getComposition(newSalad));\n  thunkAPI.dispatch(createClone());\n});","map":{"version":3,"sources":["/Users/elizaveta/Desktop/Develop/src/store/reducers/App/AppThunks.js"],"names":["createAsyncThunk","createClone","getComposition","updateQuantity","fetchMolecules","calculate","pushOrder","addSalad","checkLock","fetchSalads","initApp","_","thunkAPI","dispatch","molecules","getState","moleculeReducer","e","rejectWithValue","message","setOrder","salad","composition","saladOrder","addNewSalad","name","reserve","newSalad","title","price","reduce","sum","curr","qty","map","element","_id","Date","getTime","toString"],"mappings":"AAAA,SAASA,gBAAT,QAAiC,kBAAjC;AACA,SAASC,WAAT,EAAsBC,cAAtB,EAAsCC,cAAtC,QAA4D,2BAA5D;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,SAASC,SAAT,EAAoBC,SAApB,QAAqC,qBAArC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,qBAApC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AAEA,OAAO,MAAMC,OAAO,GAAGV,gBAAgB,CAAC,SAAD,EAAY,OAAOW,CAAP,EAAUC,QAAV,KAAuB;AACtE,MAAI;AACA,UAAMA,QAAQ,CAACC,QAAT,CAAkBT,cAAc,EAAhC,CAAN;AACA,UAAMQ,QAAQ,CAACC,QAAT,CAAkBJ,WAAW,EAA7B,CAAN;AAEA,UAAM;AAAEK,MAAAA;AAAF,QAAgBF,QAAQ,CAACG,QAAT,GAAoBC,eAA1C;AACAJ,IAAAA,QAAQ,CAACC,QAAT,CAAkBL,SAAS,CAACM,SAAD,CAA3B;AACH,GAND,CAME,OAAOG,CAAP,EAAU;AACR,WAAOL,QAAQ,CAACM,eAAT,CAAyBD,CAAC,CAACE,OAA3B,CAAP;AACH;AACJ,CAVsC,CAAhC;AAYP,OAAO,MAAMC,QAAQ,GAAGpB,gBAAgB,CAAC,UAAD,EAAa,OAAOqB,KAAP,EAAcT,QAAd,KAA2B;AAC5EA,EAAAA,QAAQ,CAACC,QAAT,CAAkBX,cAAc,CAACmB,KAAD,CAAhC;AACAT,EAAAA,QAAQ,CAACC,QAAT,CAAkBV,cAAc,EAAhC;AAEA,QAAM;AAAEW,IAAAA,SAAF;AAAaQ,IAAAA;AAAb,MAA6BV,QAAQ,CAACG,QAAT,GAAoBC,eAAvD;AAEAJ,EAAAA,QAAQ,CAACC,QAAT,CAAkBL,SAAS,CAACM,SAAD,CAA3B;AAEA,QAAMS,UAAU,GAAG,EAAE,GAAGF,KAAL;AAAYC,IAAAA;AAAZ,GAAnB;AACAV,EAAAA,QAAQ,CAACC,QAAT,CAAkBP,SAAS,CAACiB,UAAD,CAA3B;AACAX,EAAAA,QAAQ,CAACC,QAAT,CAAkBR,SAAS,EAA3B;AACH,CAXuC,CAAjC;AAaP,OAAO,MAAMmB,WAAW,GAAGxB,gBAAgB,CAAC,aAAD,EAAgB,OAAOyB,IAAP,EAAab,QAAb,KAA0B;AACjF,QAAM;AAAEc,IAAAA;AAAF,MAAcd,QAAQ,CAACG,QAAT,GAAoBC,eAAxC;AAEA,QAAMW,QAAQ,GAAG;AACbC,IAAAA,KAAK,EAAEH,IADM;AAEbI,IAAAA,KAAK,EAAEH,OAAO,CAACI,MAAR,CAAe,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,GAAGC,IAAI,CAACC,GAAzC,EAA8C,CAA9C,CAFM;AAGbX,IAAAA,WAAW,EAAEI,OAAO,CAACQ,GAAR,CAAaC,OAAD,IAAaA,OAAO,CAACC,GAAjC,CAHA;AAIbA,IAAAA,GAAG,EAAE,IAAIC,IAAJ,GAAWC,OAAX,GAAqBC,QAArB;AAJQ,GAAjB;AAOA3B,EAAAA,QAAQ,CAACC,QAAT,CAAkBN,QAAQ,CAACoB,QAAD,CAA1B;AACAf,EAAAA,QAAQ,CAACC,QAAT,CAAkBX,cAAc,CAACyB,QAAD,CAAhC;AACAf,EAAAA,QAAQ,CAACC,QAAT,CAAkBZ,WAAW,EAA7B;AACH,CAb0C,CAApC","sourcesContent":["import { createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { createClone, getComposition, updateQuantity } from \"../Molecule/MoleculeSlice\";\nimport { fetchMolecules } from \"../Molecule/MoleculeThunks\";\nimport { calculate, pushOrder } from \"../Order/OrderSlice\";\nimport { addSalad, checkLock } from \"../Salad/SaladSlice\";\nimport { fetchSalads } from \"../Salad/SaladThunks\";\n\nexport const initApp = createAsyncThunk(\"initApp\", async (_, thunkAPI) => {\n    try {\n        await thunkAPI.dispatch(fetchMolecules());\n        await thunkAPI.dispatch(fetchSalads());\n\n        const { molecules } = thunkAPI.getState().moleculeReducer;\n        thunkAPI.dispatch(checkLock(molecules));\n    } catch (e) {\n        return thunkAPI.rejectWithValue(e.message);\n    }\n});\n\nexport const setOrder = createAsyncThunk(\"setOrder\", async (salad, thunkAPI) => {\n    thunkAPI.dispatch(getComposition(salad));\n    thunkAPI.dispatch(updateQuantity());\n\n    const { molecules, composition } = thunkAPI.getState().moleculeReducer;\n\n    thunkAPI.dispatch(checkLock(molecules));\n\n    const saladOrder = { ...salad, composition };\n    thunkAPI.dispatch(pushOrder(saladOrder));\n    thunkAPI.dispatch(calculate());\n});\n\nexport const addNewSalad = createAsyncThunk(\"addNewSalad\", async (name, thunkAPI) => {\n    const { reserve } = thunkAPI.getState().moleculeReducer;\n\n    const newSalad = {\n        title: name,\n        price: reserve.reduce((sum, curr) => sum + curr.qty, 0),\n        composition: reserve.map((element) => element._id),\n        _id: new Date().getTime().toString(),\n    };\n\n    thunkAPI.dispatch(addSalad(newSalad));\n    thunkAPI.dispatch(getComposition(newSalad));\n    thunkAPI.dispatch(createClone());\n});\n"]},"metadata":{},"sourceType":"module"}