{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { postOrder } from \"./OrderThunks\";\nconst initialState = {\n  salads: [],\n  order: {\n    molecules: []\n  },\n  loading: false,\n  error: \"\"\n};\nexport const OrderSlice = createSlice({\n  name: \"order\",\n  initialState,\n  reducers: {\n    pushOrder(state, action) {\n      state.salads.push(action.payload);\n    },\n\n    calculate(state) {\n      const molecules = {};\n      state.salads.forEach(salad => {\n        salad.composition.forEach(molecule => {\n          molecules[molecule._id] = (molecules[molecule._id] || 0) + molecule.count;\n        });\n      });\n      const moleculesKeys = Object.keys(molecules);\n      state.order.molecules = moleculesKeys.map(id => ({\n        id,\n        qty: molecules[id]\n      }));\n    }\n\n  },\n  extraReducers: {\n    [postOrder.fulfilled.type]: (state, actions) => {\n      state.loading = false;\n      state.error = \"\";\n      state.salads = [];\n      state.order = {\n        molecules: []\n      };\n    },\n    [postOrder.pending.type]: state => {\n      state.loading = true;\n    },\n    [postOrder.rejected.type]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const orderReducer = OrderSlice.reducer;\nexport const {\n  pushOrder,\n  calculate\n} = OrderSlice.actions;","map":{"version":3,"sources":["/Users/elizaveta/Desktop/Develop/src/store/reducers/Order/OrderSlice.js"],"names":["createSlice","postOrder","initialState","salads","order","molecules","loading","error","OrderSlice","name","reducers","pushOrder","state","action","push","payload","calculate","forEach","salad","composition","molecule","_id","count","moleculesKeys","Object","keys","map","id","qty","extraReducers","fulfilled","type","actions","pending","rejected","orderReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,SAAT,QAA0B,eAA1B;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,MAAM,EAAE,EADS;AAEjBC,EAAAA,KAAK,EAAE;AACHC,IAAAA,SAAS,EAAE;AADR,GAFU;AAKjBC,EAAAA,OAAO,EAAE,KALQ;AAMjBC,EAAAA,KAAK,EAAE;AANU,CAArB;AASA,OAAO,MAAMC,UAAU,GAAGR,WAAW,CAAC;AAClCS,EAAAA,IAAI,EAAE,OAD4B;AAElCP,EAAAA,YAFkC;AAGlCQ,EAAAA,QAAQ,EAAE;AACNC,IAAAA,SAAS,CAACC,KAAD,EAAQC,MAAR,EAAgB;AACrBD,MAAAA,KAAK,CAACT,MAAN,CAAaW,IAAb,CAAkBD,MAAM,CAACE,OAAzB;AACH,KAHK;;AAINC,IAAAA,SAAS,CAACJ,KAAD,EAAQ;AACb,YAAMP,SAAS,GAAG,EAAlB;AACAO,MAAAA,KAAK,CAACT,MAAN,CAAac,OAAb,CAAsBC,KAAD,IAAW;AAC5BA,QAAAA,KAAK,CAACC,WAAN,CAAkBF,OAAlB,CAA2BG,QAAD,IAAc;AACpCf,UAAAA,SAAS,CAACe,QAAQ,CAACC,GAAV,CAAT,GAA0B,CAAChB,SAAS,CAACe,QAAQ,CAACC,GAAV,CAAT,IAA2B,CAA5B,IAAiCD,QAAQ,CAACE,KAApE;AACH,SAFD;AAGH,OAJD;AAMA,YAAMC,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYpB,SAAZ,CAAtB;AACAO,MAAAA,KAAK,CAACR,KAAN,CAAYC,SAAZ,GAAwBkB,aAAa,CAACG,GAAd,CAAmBC,EAAD,KAAS;AAC/CA,QAAAA,EAD+C;AAE/CC,QAAAA,GAAG,EAAEvB,SAAS,CAACsB,EAAD;AAFiC,OAAT,CAAlB,CAAxB;AAIH;;AAjBK,GAHwB;AAsBlCE,EAAAA,aAAa,EAAE;AACX,KAAC5B,SAAS,CAAC6B,SAAV,CAAoBC,IAArB,GAA4B,CAACnB,KAAD,EAAQoB,OAAR,KAAoB;AAC5CpB,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAc,EAAd;AACAK,MAAAA,KAAK,CAACT,MAAN,GAAe,EAAf;AACAS,MAAAA,KAAK,CAACR,KAAN,GAAc;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KANU;AAOX,KAACJ,SAAS,CAACgC,OAAV,CAAkBF,IAAnB,GAA2BnB,KAAD,IAAW;AACjCA,MAAAA,KAAK,CAACN,OAAN,GAAgB,IAAhB;AACH,KATU;AAUX,KAACL,SAAS,CAACiC,QAAV,CAAmBH,IAApB,GAA2B,CAACnB,KAAD,EAAQC,MAAR,KAAmB;AAC1CD,MAAAA,KAAK,CAACN,OAAN,GAAgB,KAAhB;AACAM,MAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACE,OAArB;AACH;AAbU;AAtBmB,CAAD,CAA9B;AAuCP,OAAO,MAAMoB,YAAY,GAAG3B,UAAU,CAAC4B,OAAhC;AACP,OAAO,MAAM;AAAEzB,EAAAA,SAAF;AAAaK,EAAAA;AAAb,IAA2BR,UAAU,CAACwB,OAA5C","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { postOrder } from \"./OrderThunks\";\n\nconst initialState = {\n    salads: [],\n    order: {\n        molecules: [],\n    },\n    loading: false,\n    error: \"\",\n};\n\nexport const OrderSlice = createSlice({\n    name: \"order\",\n    initialState,\n    reducers: {\n        pushOrder(state, action) {\n            state.salads.push(action.payload);\n        },\n        calculate(state) {\n            const molecules = {};\n            state.salads.forEach((salad) => {\n                salad.composition.forEach((molecule) => {\n                    molecules[molecule._id] = (molecules[molecule._id] || 0) + molecule.count;\n                });\n            });\n\n            const moleculesKeys = Object.keys(molecules);\n            state.order.molecules = moleculesKeys.map((id) => ({\n                id,\n                qty: molecules[id],\n            }));\n        },\n    },\n    extraReducers: {\n        [postOrder.fulfilled.type]: (state, actions) => {\n            state.loading = false;\n            state.error = \"\";\n            state.salads = [];\n            state.order = { molecules: [] };\n        },\n        [postOrder.pending.type]: (state) => {\n            state.loading = true;\n        },\n        [postOrder.rejected.type]: (state, action) => {\n            state.loading = false;\n            state.error = action.payload;\n        },\n    },\n});\n\nexport const orderReducer = OrderSlice.reducer;\nexport const { pushOrder, calculate } = OrderSlice.actions;\n"]},"metadata":{},"sourceType":"module"}