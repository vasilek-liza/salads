{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { initApp } from \"./AppThunks\";\nconst initialState = {\n  loading: false,\n  error: \"\"\n};\nexport const AppSlice = createSlice({\n  name: \"app\",\n  initialState,\n  extraReducers: {\n    [initApp.fulfilled.type]: state => {\n      state.loading = false;\n      state.error = \"\";\n    },\n    [initApp.pending.type]: state => {\n      state.loading = true;\n    },\n    [initApp.rejected.type]: (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    }\n  }\n});\nexport const appReducer = AppSlice.reducer;","map":{"version":3,"sources":["/Users/elizaveta/Desktop/Develop/src/store/reducers/App/AppSlice.js"],"names":["createSlice","initApp","initialState","loading","error","AppSlice","name","extraReducers","fulfilled","type","state","pending","rejected","action","payload","appReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,OAAT,QAAwB,aAAxB;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE,KADQ;AAEjBC,EAAAA,KAAK,EAAE;AAFU,CAArB;AAKA,OAAO,MAAMC,QAAQ,GAAGL,WAAW,CAAC;AAChCM,EAAAA,IAAI,EAAE,KAD0B;AAEhCJ,EAAAA,YAFgC;AAGhCK,EAAAA,aAAa,EAAE;AACX,KAACN,OAAO,CAACO,SAAR,CAAkBC,IAAnB,GAA2BC,KAAD,IAAW;AACjCA,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,KAAN,GAAc,EAAd;AACH,KAJU;AAKX,KAACH,OAAO,CAACU,OAAR,CAAgBF,IAAjB,GAAyBC,KAAD,IAAW;AAC/BA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACH,KAPU;AAQX,KAACF,OAAO,CAACW,QAAR,CAAiBH,IAAlB,GAAyB,CAACC,KAAD,EAAQG,MAAR,KAAmB;AACxCH,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,KAAN,GAAcS,MAAM,CAACC,OAArB;AACH;AAXU;AAHiB,CAAD,CAA5B;AAkBP,OAAO,MAAMC,UAAU,GAAGV,QAAQ,CAACW,OAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\nimport { initApp } from \"./AppThunks\";\n\nconst initialState = {\n    loading: false,\n    error: \"\",\n};\n\nexport const AppSlice = createSlice({\n    name: \"app\",\n    initialState,\n    extraReducers: {\n        [initApp.fulfilled.type]: (state) => {\n            state.loading = false;\n            state.error = \"\";\n        },\n        [initApp.pending.type]: (state) => {\n            state.loading = true;\n        },\n        [initApp.rejected.type]: (state, action) => {\n            state.loading = false;\n            state.error = action.payload;\n        },\n    },\n});\n\nexport const appReducer = AppSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}